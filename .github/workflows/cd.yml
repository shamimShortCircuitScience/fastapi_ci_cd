name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]  # Trigger CD pipeline after CI pipeline completes
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted  # Using your self-hosted runner

    if: github.event.workflow_run.conclusion == 'success'  # Only proceed if CI was successful

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Debug the file locations to ensure we're in the correct directory
      - name: Debug File Locations
        run: |
          echo "Current directory: $(pwd)"
          ls -al  # List the files to ensure docker-compose.yml exists

      # Step 3: Remove any existing docker-compose.yml file on the remote EC2
      - name: Remove Existing docker-compose.yml on EC2
        uses: appleboy/ssh-action@master
        with:
          host: 52.91.98.167  # Your EC2 IP
          username: ubuntu  # EC2's default user
          key: ${{ secrets.EC2_KEY }}  # GitHub secret for EC2 SSH private key
          port: 22
          script: |
            echo "Removing any existing docker-compose.yml file..."
            rm -f /home/ubuntu/docker-compose.yml  # Remove the existing file if it exists

      # Step 4: Upload docker-compose.yml to EC2
      - name: Upload Docker Compose to EC2
        uses: appleboy/scp-action@master
        with:
          host: 52.91.98.167  # Your EC2 IP
          username: ubuntu  # EC2's default user
          key: ${{ secrets.EC2_KEY }}  # GitHub secret for EC2 SSH private key
          port: 22
          source: ./docker-compose.yml  # Path to docker-compose.yml on your self-hosted runner
          target: /home/ubuntu/  # Target directory on EC2

      # Step 5: Verify the upload on EC2 by checking files
      - name: Check Files on EC2
        uses: appleboy/ssh-action@master
        with:
          host: 52.91.98.167  # Your EC2 IP
          username: ubuntu  # EC2's default user
          key: ${{ secrets.EC2_KEY }}  # GitHub secret for EC2 SSH private key
          port: 22
          script: |
            echo "Checking files on EC2:"
            ls -al /home/ubuntu/  # List files in the target directory to verify upload

      # Step 6: Deploy Application on EC2 using Docker Compose
      - name: Deploy Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: 52.91.98.167  # Your EC2 IP
          username: ubuntu  # EC2's default user
          key: ${{ secrets.EC2_KEY }}  # GitHub secret for EC2 SSH private key
          port: 22
          script: |
            echo "Starting Docker Compose on EC2..."
            cd /home/ubuntu/
            docker-compose down  # Bring down any existing containers
            docker-compose up -d  # Bring up containers in detached mode
